// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto_comment.proto

/*
Package comment is a generated protocol buffer package.

It is generated from these files:
	proto_comment.proto

It has these top-level messages:
	CommentId
	NewId
	CommentBeginAndEnd
	CommentInfo
	CommentArrayInfo
*/
package comment

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommentId struct {
	CommentId int32 `protobuf:"varint,1,opt,name=commentId" json:"commentId,omitempty"`
}

func (m *CommentId) Reset()                    { *m = CommentId{} }
func (m *CommentId) String() string            { return proto.CompactTextString(m) }
func (*CommentId) ProtoMessage()               {}
func (*CommentId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CommentId) GetCommentId() int32 {
	if m != nil {
		return m.CommentId
	}
	return 0
}

type NewId struct {
	NewId []int32 `protobuf:"varint,1,rep,packed,name=newId" json:"newId,omitempty"`
}

func (m *NewId) Reset()                    { *m = NewId{} }
func (m *NewId) String() string            { return proto.CompactTextString(m) }
func (*NewId) ProtoMessage()               {}
func (*NewId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewId) GetNewId() []int32 {
	if m != nil {
		return m.NewId
	}
	return nil
}

type CommentBeginAndEnd struct {
	Begin int64 `protobuf:"varint,1,opt,name=begin" json:"begin,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *CommentBeginAndEnd) Reset()                    { *m = CommentBeginAndEnd{} }
func (m *CommentBeginAndEnd) String() string            { return proto.CompactTextString(m) }
func (*CommentBeginAndEnd) ProtoMessage()               {}
func (*CommentBeginAndEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommentBeginAndEnd) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *CommentBeginAndEnd) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type CommentInfo struct {
	Id      int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	NewId   int32  `protobuf:"varint,2,opt,name=newId" json:"newId,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content" json:"content,omitempty"`
	Time    int64  `protobuf:"varint,4,opt,name=time" json:"time,omitempty"`
	Account string `protobuf:"bytes,5,opt,name=account" json:"account,omitempty"`
}

func (m *CommentInfo) Reset()                    { *m = CommentInfo{} }
func (m *CommentInfo) String() string            { return proto.CompactTextString(m) }
func (*CommentInfo) ProtoMessage()               {}
func (*CommentInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CommentInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CommentInfo) GetNewId() int32 {
	if m != nil {
		return m.NewId
	}
	return 0
}

func (m *CommentInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CommentInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *CommentInfo) GetAccount() string {
	if m != nil {
		return m.Account
	}
	return ""
}

type CommentArrayInfo struct {
	CommentInfo []*CommentInfo `protobuf:"bytes,1,rep,name=commentInfo" json:"commentInfo,omitempty"`
}

func (m *CommentArrayInfo) Reset()                    { *m = CommentArrayInfo{} }
func (m *CommentArrayInfo) String() string            { return proto.CompactTextString(m) }
func (*CommentArrayInfo) ProtoMessage()               {}
func (*CommentArrayInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommentArrayInfo) GetCommentInfo() []*CommentInfo {
	if m != nil {
		return m.CommentInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CommentId)(nil), "comment.CommentId")
	proto.RegisterType((*NewId)(nil), "comment.NewId")
	proto.RegisterType((*CommentBeginAndEnd)(nil), "comment.CommentBeginAndEnd")
	proto.RegisterType((*CommentInfo)(nil), "comment.CommentInfo")
	proto.RegisterType((*CommentArrayInfo)(nil), "comment.CommentArrayInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AskNews service

type AskNewsClient interface {
	AskOneComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*CommentInfo, error)
	AskComments(ctx context.Context, in *NewId, opts ...grpc.CallOption) (*CommentArrayInfo, error)
	CreateCommentInfo(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*CommentInfo, error)
}

type askNewsClient struct {
	cc *grpc.ClientConn
}

func NewAskNewsClient(cc *grpc.ClientConn) AskNewsClient {
	return &askNewsClient{cc}
}

func (c *askNewsClient) AskOneComment(ctx context.Context, in *CommentId, opts ...grpc.CallOption) (*CommentInfo, error) {
	out := new(CommentInfo)
	err := grpc.Invoke(ctx, "/comment.AskNews/AskOneComment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askNewsClient) AskComments(ctx context.Context, in *NewId, opts ...grpc.CallOption) (*CommentArrayInfo, error) {
	out := new(CommentArrayInfo)
	err := grpc.Invoke(ctx, "/comment.AskNews/AskComments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askNewsClient) CreateCommentInfo(ctx context.Context, in *CommentInfo, opts ...grpc.CallOption) (*CommentInfo, error) {
	out := new(CommentInfo)
	err := grpc.Invoke(ctx, "/comment.AskNews/CreateCommentInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AskNews service

type AskNewsServer interface {
	AskOneComment(context.Context, *CommentId) (*CommentInfo, error)
	AskComments(context.Context, *NewId) (*CommentArrayInfo, error)
	CreateCommentInfo(context.Context, *CommentInfo) (*CommentInfo, error)
}

func RegisterAskNewsServer(s *grpc.Server, srv AskNewsServer) {
	s.RegisterService(&_AskNews_serviceDesc, srv)
}

func _AskNews_AskOneComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).AskOneComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.AskNews/AskOneComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).AskOneComment(ctx, req.(*CommentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskNews_AskComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).AskComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.AskNews/AskComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).AskComments(ctx, req.(*NewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskNews_CreateCommentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).CreateCommentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comment.AskNews/CreateCommentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).CreateCommentInfo(ctx, req.(*CommentInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _AskNews_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comment.AskNews",
	HandlerType: (*AskNewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOneComment",
			Handler:    _AskNews_AskOneComment_Handler,
		},
		{
			MethodName: "AskComments",
			Handler:    _AskNews_AskComments_Handler,
		},
		{
			MethodName: "CreateCommentInfo",
			Handler:    _AskNews_CreateCommentInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_comment.proto",
}

func init() { proto.RegisterFile("proto_comment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x4e, 0xb3, 0x40,
	0x14, 0x85, 0x0b, 0x94, 0x9f, 0x70, 0xc9, 0xdf, 0xd4, 0x6b, 0x17, 0x63, 0xa3, 0x09, 0x99, 0x15,
	0x6e, 0xba, 0xa8, 0x89, 0x0b, 0x75, 0x33, 0x36, 0x2e, 0xea, 0xa2, 0x26, 0xbc, 0x80, 0xa1, 0xc3,
	0x68, 0x08, 0x61, 0xc6, 0xc0, 0x98, 0xc6, 0xf8, 0x7c, 0xbe, 0x97, 0x61, 0x18, 0x5a, 0xa2, 0x75,
	0x77, 0xbf, 0x93, 0x33, 0xf7, 0x1c, 0x86, 0x81, 0xd3, 0xb7, 0x5a, 0x69, 0xf5, 0xcc, 0x55, 0x55,
	0x09, 0xa9, 0x17, 0x86, 0x30, 0xb0, 0x48, 0x2f, 0x21, 0x5c, 0x75, 0xe3, 0x3a, 0xc7, 0x73, 0x08,
	0x79, 0x0f, 0xc4, 0x89, 0x9d, 0xc4, 0x4f, 0x0f, 0x02, 0xbd, 0x00, 0x7f, 0x23, 0x76, 0xeb, 0x1c,
	0x67, 0xe0, 0xcb, 0x76, 0x20, 0x4e, 0xec, 0x25, 0x7e, 0xda, 0x01, 0xbd, 0x03, 0xb4, 0x9b, 0xee,
	0xc5, 0x6b, 0x21, 0x99, 0xcc, 0x1f, 0xa4, 0xf1, 0x6e, 0x5b, 0x34, 0xeb, 0xbc, 0xb4, 0x03, 0x9c,
	0x82, 0x27, 0x64, 0x4e, 0x5c, 0xa3, 0xb5, 0x23, 0xfd, 0x84, 0xa8, 0xef, 0x21, 0x5f, 0x14, 0x4e,
	0xc0, 0x2d, 0xfa, 0x0a, 0x6e, 0x31, 0x88, 0x74, 0x8d, 0xd4, 0x01, 0x12, 0x08, 0xb8, 0x92, 0x5a,
	0x48, 0x4d, 0xbc, 0xd8, 0x49, 0xc2, 0xb4, 0x47, 0x44, 0x18, 0xeb, 0xa2, 0x12, 0x64, 0x6c, 0x12,
	0xcc, 0xdc, 0xba, 0x33, 0xce, 0xd5, 0xbb, 0xd4, 0xc4, 0xef, 0xdc, 0x16, 0xe9, 0x23, 0x4c, 0x6d,
	0x38, 0xab, 0xeb, 0xec, 0xc3, 0x34, 0xb8, 0x86, 0x88, 0x1f, 0x0a, 0x99, 0x4f, 0x8d, 0x96, 0xb3,
	0x45, 0x7f, 0x8d, 0x83, 0xb2, 0xe9, 0xd0, 0xb8, 0xfc, 0x72, 0x20, 0x60, 0x4d, 0xb9, 0x11, 0xbb,
	0x06, 0x6f, 0xe1, 0x3f, 0x6b, 0xca, 0x27, 0x29, 0xac, 0x1b, 0xf1, 0xd7, 0xf9, 0x7c, 0x7e, 0x74,
	0x27, 0x1d, 0xe1, 0x0d, 0x44, 0xac, 0x29, 0xad, 0xd6, 0xe0, 0x64, 0x6f, 0x33, 0x3f, 0x61, 0x7e,
	0xf6, 0xf3, 0xd8, 0xbe, 0x3a, 0x1d, 0x21, 0x83, 0x93, 0x55, 0x2d, 0x32, 0x2d, 0x86, 0x77, 0x7a,
	0x34, 0xe8, 0xaf, 0xf8, 0xed, 0x3f, 0xf3, 0x50, 0xae, 0xbe, 0x03, 0x00, 0x00, 0xff, 0xff, 0x1d,
	0xdf, 0x2b, 0xc7, 0x3f, 0x02, 0x00, 0x00,
}
