// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto_new.proto

/*
Package newinfo is a generated protocol buffer package.

It is generated from these files:
	proto_new.proto

It has these top-level messages:
	NewId
	NewIds
	NewBeginAndEnd
	NewInfo
	NewArrayInfo
*/
package newinfo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NewId struct {
	Newid int32 `protobuf:"varint,1,opt,name=newid" json:"newid,omitempty"`
}

func (m *NewId) Reset()                    { *m = NewId{} }
func (m *NewId) String() string            { return proto.CompactTextString(m) }
func (*NewId) ProtoMessage()               {}
func (*NewId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NewId) GetNewid() int32 {
	if m != nil {
		return m.Newid
	}
	return 0
}

type NewIds struct {
	News []int32 `protobuf:"varint,1,rep,packed,name=news" json:"news,omitempty"`
}

func (m *NewIds) Reset()                    { *m = NewIds{} }
func (m *NewIds) String() string            { return proto.CompactTextString(m) }
func (*NewIds) ProtoMessage()               {}
func (*NewIds) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NewIds) GetNews() []int32 {
	if m != nil {
		return m.News
	}
	return nil
}

type NewBeginAndEnd struct {
	Begin int64 `protobuf:"varint,1,opt,name=begin" json:"begin,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end" json:"end,omitempty"`
}

func (m *NewBeginAndEnd) Reset()                    { *m = NewBeginAndEnd{} }
func (m *NewBeginAndEnd) String() string            { return proto.CompactTextString(m) }
func (*NewBeginAndEnd) ProtoMessage()               {}
func (*NewBeginAndEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NewBeginAndEnd) GetBegin() int64 {
	if m != nil {
		return m.Begin
	}
	return 0
}

func (m *NewBeginAndEnd) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type NewInfo struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Game        string `protobuf:"bytes,2,opt,name=game" json:"game,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Icon        string `protobuf:"bytes,5,opt,name=icon" json:"icon,omitempty"`
	HotIcon     string `protobuf:"bytes,6,opt,name=hot_icon,json=hotIcon" json:"hot_icon,omitempty"`
	Source      string `protobuf:"bytes,7,opt,name=source" json:"source,omitempty"`
	Content     string `protobuf:"bytes,8,opt,name=content" json:"content,omitempty"`
	Time        int64  `protobuf:"varint,9,opt,name=time" json:"time,omitempty"`
}

func (m *NewInfo) Reset()                    { *m = NewInfo{} }
func (m *NewInfo) String() string            { return proto.CompactTextString(m) }
func (*NewInfo) ProtoMessage()               {}
func (*NewInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NewInfo) GetGame() string {
	if m != nil {
		return m.Game
	}
	return ""
}

func (m *NewInfo) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *NewInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *NewInfo) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *NewInfo) GetHotIcon() string {
	if m != nil {
		return m.HotIcon
	}
	return ""
}

func (m *NewInfo) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *NewInfo) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *NewInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type NewArrayInfo struct {
	NewsInfo []*NewInfo `protobuf:"bytes,1,rep,name=newsInfo" json:"newsInfo,omitempty"`
}

func (m *NewArrayInfo) Reset()                    { *m = NewArrayInfo{} }
func (m *NewArrayInfo) String() string            { return proto.CompactTextString(m) }
func (*NewArrayInfo) ProtoMessage()               {}
func (*NewArrayInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NewArrayInfo) GetNewsInfo() []*NewInfo {
	if m != nil {
		return m.NewsInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*NewId)(nil), "newinfo.NewId")
	proto.RegisterType((*NewIds)(nil), "newinfo.NewIds")
	proto.RegisterType((*NewBeginAndEnd)(nil), "newinfo.NewBeginAndEnd")
	proto.RegisterType((*NewInfo)(nil), "newinfo.NewInfo")
	proto.RegisterType((*NewArrayInfo)(nil), "newinfo.NewArrayInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AskNews service

type AskNewsClient interface {
	AskOneNew(ctx context.Context, in *NewId, opts ...grpc.CallOption) (*NewInfo, error)
	AskNews(ctx context.Context, in *NewIds, opts ...grpc.CallOption) (*NewArrayInfo, error)
	AskNewBeginAndEnd(ctx context.Context, in *NewBeginAndEnd, opts ...grpc.CallOption) (*NewArrayInfo, error)
	CreateNews(ctx context.Context, in *NewInfo, opts ...grpc.CallOption) (*NewInfo, error)
}

type askNewsClient struct {
	cc *grpc.ClientConn
}

func NewAskNewsClient(cc *grpc.ClientConn) AskNewsClient {
	return &askNewsClient{cc}
}

func (c *askNewsClient) AskOneNew(ctx context.Context, in *NewId, opts ...grpc.CallOption) (*NewInfo, error) {
	out := new(NewInfo)
	err := grpc.Invoke(ctx, "/newinfo.AskNews/AskOneNew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askNewsClient) AskNews(ctx context.Context, in *NewIds, opts ...grpc.CallOption) (*NewArrayInfo, error) {
	out := new(NewArrayInfo)
	err := grpc.Invoke(ctx, "/newinfo.AskNews/AskNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askNewsClient) AskNewBeginAndEnd(ctx context.Context, in *NewBeginAndEnd, opts ...grpc.CallOption) (*NewArrayInfo, error) {
	out := new(NewArrayInfo)
	err := grpc.Invoke(ctx, "/newinfo.AskNews/AskNewBeginAndEnd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *askNewsClient) CreateNews(ctx context.Context, in *NewInfo, opts ...grpc.CallOption) (*NewInfo, error) {
	out := new(NewInfo)
	err := grpc.Invoke(ctx, "/newinfo.AskNews/CreateNews", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AskNews service

type AskNewsServer interface {
	AskOneNew(context.Context, *NewId) (*NewInfo, error)
	AskNews(context.Context, *NewIds) (*NewArrayInfo, error)
	AskNewBeginAndEnd(context.Context, *NewBeginAndEnd) (*NewArrayInfo, error)
	CreateNews(context.Context, *NewInfo) (*NewInfo, error)
}

func RegisterAskNewsServer(s *grpc.Server, srv AskNewsServer) {
	s.RegisterService(&_AskNews_serviceDesc, srv)
}

func _AskNews_AskOneNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).AskOneNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newinfo.AskNews/AskOneNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).AskOneNew(ctx, req.(*NewId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskNews_AskNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).AskNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newinfo.AskNews/AskNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).AskNews(ctx, req.(*NewIds))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskNews_AskNewBeginAndEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBeginAndEnd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).AskNewBeginAndEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newinfo.AskNews/AskNewBeginAndEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).AskNewBeginAndEnd(ctx, req.(*NewBeginAndEnd))
	}
	return interceptor(ctx, in, info, handler)
}

func _AskNews_CreateNews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AskNewsServer).CreateNews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/newinfo.AskNews/CreateNews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AskNewsServer).CreateNews(ctx, req.(*NewInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _AskNews_serviceDesc = grpc.ServiceDesc{
	ServiceName: "newinfo.AskNews",
	HandlerType: (*AskNewsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AskOneNew",
			Handler:    _AskNews_AskOneNew_Handler,
		},
		{
			MethodName: "AskNews",
			Handler:    _AskNews_AskNews_Handler,
		},
		{
			MethodName: "AskNewBeginAndEnd",
			Handler:    _AskNews_AskNewBeginAndEnd_Handler,
		},
		{
			MethodName: "CreateNews",
			Handler:    _AskNews_CreateNews_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto_new.proto",
}

func init() { proto.RegisterFile("proto_new.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x6e, 0xda, 0x40,
	0x10, 0xc6, 0x18, 0xdb, 0x30, 0x54, 0x40, 0x57, 0xfd, 0xd9, 0xa2, 0x56, 0x42, 0x3e, 0x71, 0xa8,
	0xa8, 0x04, 0x97, 0x1e, 0x7a, 0x71, 0x23, 0x0e, 0x5c, 0x1c, 0xc9, 0x2f, 0x80, 0xc0, 0x1e, 0x60,
	0x45, 0xd8, 0x45, 0xde, 0x8d, 0x56, 0x79, 0xd5, 0x3c, 0x42, 0x9e, 0x22, 0xda, 0xb1, 0x45, 0x8c,
	0x48, 0x6e, 0xdf, 0xcf, 0xcc, 0x37, 0xb3, 0x63, 0xc3, 0xf0, 0x5c, 0x2a, 0xa3, 0xd6, 0x12, 0xed,
	0x8c, 0x10, 0x8b, 0x24, 0x5a, 0x21, 0x77, 0x2a, 0xfe, 0x05, 0x41, 0x8a, 0x76, 0x55, 0xb0, 0x2f,
	0x10, 0x38, 0xad, 0xe0, 0xde, 0xc4, 0x9b, 0x06, 0x59, 0x45, 0xe2, 0x9f, 0x10, 0x92, 0xad, 0x19,
	0x83, 0x8e, 0x44, 0xab, 0xb9, 0x37, 0xf1, 0xa7, 0x41, 0x46, 0x38, 0xfe, 0x0b, 0x83, 0x14, 0xed,
	0x7f, 0xdc, 0x0b, 0x99, 0xc8, 0x62, 0x29, 0x29, 0x65, 0xeb, 0x28, 0xa5, 0xf8, 0x59, 0x45, 0xd8,
	0x08, 0x7c, 0x94, 0x05, 0x6f, 0x93, 0xe6, 0x60, 0xfc, 0xec, 0x41, 0xe4, 0x82, 0xe5, 0x4e, 0xb1,
	0x01, 0xb4, 0x2f, 0x63, 0xdb, 0xa2, 0x70, 0x93, 0xf6, 0x9b, 0x13, 0x52, 0x79, 0x2f, 0x23, 0xec,
	0x72, 0x8d, 0x30, 0x0f, 0xc8, 0x7d, 0x12, 0x2b, 0xc2, 0x26, 0xd0, 0x2f, 0x50, 0xe7, 0xa5, 0x38,
	0x1b, 0xa1, 0x24, 0xef, 0x90, 0xd7, 0x94, 0x5c, 0x96, 0xc8, 0x95, 0xe4, 0x41, 0x95, 0xe5, 0x30,
	0xfb, 0x01, 0xdd, 0x83, 0x32, 0x6b, 0xd2, 0x43, 0xd2, 0xa3, 0x83, 0x32, 0x2b, 0x67, 0x7d, 0x83,
	0x50, 0xab, 0xc7, 0x32, 0x47, 0x1e, 0x91, 0x51, 0x33, 0xc6, 0x21, 0xca, 0x95, 0x34, 0x28, 0x0d,
	0xef, 0x56, 0x1d, 0x35, 0x75, 0x03, 0x8c, 0x38, 0x21, 0xef, 0xd1, 0xdb, 0x08, 0xc7, 0xff, 0xe0,
	0x53, 0x8a, 0x36, 0x29, 0xcb, 0xcd, 0x13, 0x3d, 0xf0, 0x37, 0x74, 0xdd, 0xb9, 0x1c, 0xa6, 0xf3,
	0xf5, 0xe7, 0xa3, 0x59, 0x7d, 0xff, 0x59, 0x7d, 0x84, 0xec, 0x52, 0x31, 0x7f, 0xf1, 0x20, 0x4a,
	0xf4, 0x31, 0x45, 0xab, 0xd9, 0x1f, 0xe8, 0x25, 0xfa, 0x78, 0x2f, 0x31, 0x45, 0xcb, 0x06, 0x57,
	0x4d, 0xc5, 0xf8, 0x26, 0x24, 0x6e, 0xb1, 0xc5, 0x5b, 0xef, 0xf0, 0xba, 0x5c, 0x8f, 0xbf, 0x36,
	0x85, 0xcb, 0x76, 0x71, 0x8b, 0x2d, 0xe1, 0x73, 0xd5, 0xd4, 0xfc, 0x92, 0xdf, 0x9b, 0xd5, 0x0d,
	0xe3, 0xe3, 0x98, 0x39, 0xc0, 0x5d, 0x89, 0x1b, 0x83, 0x34, 0xfe, 0x66, 0xbb, 0xf7, 0xf6, 0xdd,
	0x86, 0xf4, 0x3b, 0x2e, 0x5e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x73, 0xcf, 0xc5, 0xc2, 0xa1, 0x02,
	0x00, 0x00,
}
